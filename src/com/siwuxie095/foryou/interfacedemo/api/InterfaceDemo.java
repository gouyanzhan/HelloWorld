package com.siwuxie095.foryou.interfacedemo.api;

/**
 * 接口
 *
 * @author Jiajing Li
 * @date 2019-09-16 23:06:53
 */
public interface InterfaceDemo {

    /**
     * 接口（关键字：interface）
     *
     * 接口是一个相对概念，是相对外界来说的，可能是前端、其他系统、其他模块、其他服务、
     * 甚至是其他公司的系统。（使用方使用接口，提供方提供接口。）
     * 相对：接口使用方、调用方（消费者 consumer）～ 接口提供方（生产者 provider），
     * 使用方和提供方共存且有一定的边界区分，接口才有存在的意义。
     * 所有外界要想访问当前服务，都必须通过接口来进行。也就是说，交互要通过接口来进行。
     *
     * 接口的内涵其实就是提供了什么能力，或者表示具有什么能力（？？？）。接口本身则更像
     * 一份协议、规约（相对），提供方按照使用方的需求提供了服务，使用方按照提供方的设计
     * 说明正确使用。
     *
     * 接口中只有两种存在：
     * （1）全局常量（修饰符，public static final，可省略）
     * （2）全局抽象方法，即 接口方法（修饰符，public abstract，可省略）
     *
     * 在接口中，一般只会有接口方法，不会有全局常量。
     *
     * 但是接口中的接口方法仅仅只是方法的声明，并没有进行实现。这正是接口的特殊之处，
     * 也是接口被用作交互的核心原因，它把它的实现给隐藏了，并不把实现方式暴露给外界。
     *
     * 为什么要隐藏？
     * 对于正常使用者来说，按照正常的使用方法去调用接口即可，也不太需要了解内部实现
     * 是怎样的。简单来说，就是不 care。
     * 对于恶意使用者来说，也就是攻击者，一旦暴露内部实现，可能会根据代码漏洞（毕竟不
     * 可能万无一失），对系统发起攻击，导致系统瘫痪。
     * 如：fast-json 漏洞产生的 DOS/DDOS 攻击。（distributed-denial-of-service）
     *
     * 简而言之，为了干净，更为了安全。
     *
     * 怎么隐藏？
     * 将接口方法的声明和实现分离开。即 接口和实现类。前者是 interface，后者是 class。
     * 二者通过 implements 关键字关联起来。实现类中要重写所有的接口方法（override），
     * 因为所有的接口都必须要实现，以提供相相对应的功能/服务。
     *
     * 将实现隐藏之后，即便实现方式上依然有漏洞，也不可能被攻击者直接发起针对性的攻击，
     * 最多只能尝试性的攻击，但基本不可能成功。
     * 同时，使用者也因为只需要看到声明即可，而觉得赏心悦目。
     */

    int CONST_A = 1;

    public String CONST_B = "2";

    public static final double CONST_C = 3.0;


    String getDemo(int i);

    void setDemo(int i);

    boolean saveDemo(String i);

    void deleteDemo(double i);

    void updateDemo(float i);


}
