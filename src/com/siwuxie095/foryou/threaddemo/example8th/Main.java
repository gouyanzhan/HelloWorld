package com.siwuxie095.foryou.threaddemo.example8th;

/**
 * @author Jiajing Li
 * @date 2019-12-28 17:34:23
 */
public class Main {

    /**
     * 死锁
     *
     * 死锁必须具备以下四个条件：
     * （1）互斥条件：该资源任意一个时刻只由一个线程占用。
     * （2）请求与保持条件：一个进程因请求资源而阻塞时，对已获得的资源保持不放。
     * （3）不剥夺条件：线程已获得的资源在末使用完之前不能被其他线程强行剥夺，只有自己使用完毕后才释放资源。
     * （4）循环等待条件：若干进程之间形成一种头尾相接的循环等待资源关系。
     *
     *
     * 如何避免线程死锁？只要破坏产生死锁的四个条件中的其中一个即可。
     *
     * （1）破坏互斥条件
     * 这个条件并没有办法破坏，因为用锁本来就是想让多线程互斥的（临界资源需要互斥访问）。
     * （2）破坏请求与保持条件
     * 一次性申请所有的资源。
     * （3）破坏不剥夺条件
     * 占用部分资源的线程进一步申请其他资源时，如果申请不到，可以主动释放它占有的资源。
     * （4）破坏循环等待条件
     * 靠按序申请资源来预防。按某一顺序申请资源，释放资源则反序释放。破坏循环等待条件。
     */
    public static void main(String[] args) {
        DeadLock deadLock1 = new DeadLock("死锁线程 A");
        DeadLock deadLock2 = new DeadLock("死锁线程 B");

        deadLock1.start();
        deadLock2.start();
    }

}
