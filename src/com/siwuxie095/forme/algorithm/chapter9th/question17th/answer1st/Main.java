package com.siwuxie095.forme.algorithm.chapter9th.question17th.answer1st;

/**
 * 从 N 个数中等概率打印 M 个数
 *
 * 题目：
 * 给定一个长度为 N 且没有重复元素的数组 arr 和一个整数 n，实现函数等概率随机打印 arr 中的 M 个数。
 *
 * 要求：
 * （1）相同的数不要重复打印。
 * （2）时间复杂度为 O(M)，额外空间复杂度为 O(1)。
 * （3）可以改变 arr 数组。
 *
 * 解答：
 * 如果没有空间复杂度的限制，可以用一个哈希表标记一个数之前是否被打印过，就可以做到不重复打印。解法的关键
 * 点是利用要求 3 改变数组 arr。打印过程如下：
 * （1）在 [0, N-1] 中随机得到一个位置 a，然后打印 arr[a]。
 * （2）把 arr[a] 和 arr[N-1] 交换。
 * （3）在 [0, N-2] 中随机得到一个位置 b，然后打印 arr[b]。
 * （4）把 arr[b] 和 arr[N-2] 交换。
 * （5）在 [0, N-3] 中随机得到一个位置 c，然后打印 arr[c]，因为打印过的 arr[a] 和 arr[b] 已经被换
 * 到 N-1 位置和 N-2 位置，所以这次打印都不可能再出现。
 * （6）依此类推，直到打印 M 个数。
 * 总之，就是把随机选出来的数打印出来，然后将打印的数交换到范围中的最后位置，再把范围缩小，使得被打印的数
 * 下次不可能再被选中，直到打印结束。很多有关等概率随机的面试题都是利用这种和最后一个位置交换的解法，希望
 * 这种小技巧能引起重视。
 *
 * @author Jiajing Li
 * @date 2019-07-06 17:54:40
 */
public class Main {

    public static void main(String[] args) {
        int[] arr = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10};
        Print.printRandM(arr, 5);
    }

}
