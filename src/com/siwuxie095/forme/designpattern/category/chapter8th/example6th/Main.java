package com.siwuxie095.forme.designpattern.category.chapter8th.example6th;

/**
 * @author Jiajing Li
 * @date 2019-11-05 16:35:29
 */
public class Main {

    /**
     * 九个 OO 原则之第八个设计原则：
     * 别调用（打电话给）我们，我们会调用（打电话给）你。
     *
     * 也称 好莱坞原则
     *
     *
     * 好莱坞原则可以给我们一种防止 "依赖腐败" 的方法。当高层组件依赖
     * 低层组件，而低层组件又依赖高层组件，而高层组件又依赖边侧组件，
     * 而边侧组件又依赖低层组件时，依赖腐败就发生了。在这种情况下，没
     * 有人可以轻易的搞懂系统是如何设计的。
     *
     * 在好莱坞原则之下，我们允许低层组件将自己挂钩到系统上，但是高层
     * 组件会决定什么时候以及怎样使用这些低层组件。换句话说，高层组件
     * 对待低层组件的方式是 "别调用我们，我们会调用你"。
     *
     * 即 高层组件控制何时以及如何让低层组件参与。低层组件可以参与计
     * 算，但低层组件绝对不可以直接调用高层组件。
     *
     *
     * 好莱坞原则和模板方法
     *
     * 好莱坞原则和模板方法之间的连接其实还算明显：当设计模板方法模式
     * 时，告诉子类，"不要调用我们，我们会调用你"。
     *
     * 不妨看看 example3rd 中的例子，CaffeineBeverage 是高层组件，
     * 它能够控制冲泡法的算法，只有在需要子类实现某个方法时，才调用子
     * 类。饮料的客户代码只依赖 CaffeineBeverage 抽象，而不依赖具
     * 体的 Coffee 或 Tea，这可以减少整个系统的依赖。Coffee 或 Tea
     * 只简单用来提供一些实现细节，二者如果没有先被调用，绝对不会直接
     * 调用抽象类。
     * （由超类来主控一切，当它们需要的时候，自然会去调用子类）
     *
     *
     * 疑问与解答：
     *
     * 问：
     * 好莱坞原则和依赖倒置原则之间的关系如何？
     * 答：
     * 依赖倒置原则教我们尽量避免使用具体类，而多使用抽象。而好莱坞
     * 原则是用在创建框架或组件上的一种技巧，好让低层组件能够被挂钩
     * 进计算中，而且又不会让高层组件依赖低层组件。两者的目标都是在
     * 于解耦，但是依赖倒置原则更加注重如何在设计中避免依赖。
     * 好莱坞原则教我们一个技巧，创建一个有弹性的设计，允许低层结构
     * 能够互相操作，而又防止其他类太过依赖它们。
     *
     * 问：
     * 低层组件不可以调用高层组件中的方法吗？
     * 答：
     * 并不尽然。事实上，低层组件在结束时，常常会调用从基类中继承来
     * 的方法。我们所要做的是，避免让高层组件和低层组件之间有明显的
     * 环状依赖。
     *
     * 问：
     * 还有哪些设计模式采用了好莱坞原则？
     * 答：
     * 工厂方法模式、观察者模式。
     *
     *
     *
     * 相似设计模式之间的比对：
     * （1）模板方法模式：
     * 子类决定如何实现算法中的步骤。
     * （2）策略模式：
     * 封装可以互换的行为，然后使用委托来决定要采用哪一个行为。
     * （3）工厂方法模式：
     * 由子类决定实例化哪个具体类。
     *
     * （工厂方法模式其实是模板方法模式的一种特殊情况）
     */
    public static void main(String[] args) {

    }

}
