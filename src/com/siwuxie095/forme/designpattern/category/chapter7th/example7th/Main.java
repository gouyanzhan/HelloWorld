package com.siwuxie095.forme.designpattern.category.chapter7th.example7th;

/**
 * @author Jiajing Li
 * @date 2019-11-04 23:16:07
 */
public class Main {

    /**
     * 外观模式
     *
     * 提供了一个统一的接口，用来访问子系统的一群接口。外观定义了
     * 一个高层接口，让子系统更容易使用。
     *
     *
     * 外观模式的意图在于：要提供一个简单的接口，好让一个子系统更
     * 易于使用。
     *
     * 想要使用外观模式，创建了一个接口简化而统一的类，用来包装子
     * 系统中一个或多个复杂的类。外观模式相当直接，很容易理解，这
     * 方面和许多其他的模式不太一样。但这并不会降低它的威力：外观
     * 模式允许让客户和子系统之间避免紧耦合。同时外观模式也有助于
     * 遵守一个新的面向对象原则。
     *
     *
     * 九个 OO 原则之第七个设计原则：
     * 只和你的密友谈话
     *
     * 也即 最少知识（Least Knowledge）原则
     *
     *
     * 最少知识原则告诉我们要减少对象间的交互，只留下几个 "密友"。
     * 这到底是什么意思？这是说，当你正在设计一个系统，不管是任何
     * 对象，你都要注意它所交互的类有哪些，并注意它和这些类是如何
     * 交互的。
     *
     * 这个原则希望我们在设计中不要让太多的类耦合在一起，免得修改
     * 系统中一部分，会影响到其他部分。如果许多类之间相互依赖，那
     * 么这个系统就会变成一个易碎的系统，它需要花许多成本维护，也
     * 会因为太复杂而不容易被其他人了解。
     */
    public static void main(String[] args) {
        Client client = new Client();
        client.call();
    }

}
