package com.siwuxie095.forme.designpattern.category.chapter14th.example11th;

/**
 * @author Jiajing Li
 * @date 2019-11-11 19:37:18
 */
public class Main {

    /**
     * 中介者模式
     *
     * 集中相关对象之间复杂的沟通与控制方式。
     *
     *
     * 现在有一个闹钟、一个日历、一个咖啡壶。这三者之间的交互总是不断升级：
     * （1）闹钟响了，咖啡壶开始煮咖啡。
     * （2）日历说周末不要煮咖啡。
     * （3）...
     *
     * 这三者之间的交互已经就复杂了，但未来仍然有别的东西要加入这个系统。
     * 想要持续地追踪每个对象的每个规则，以及众多对象之间彼此错综复杂的
     * 关系，实在不容易。
     *
     * 在这个系统中加入了一个中介者，一切都变得简单了。
     * （1）每个对象都会在自己的状态改变时，告诉中介者。
     * （2）每个对象都会对中介者所发出对请求作出回应。
     *
     * 在没有中介者的情况下，所有的对象都需要认识其他对象。也就是说，对
     * 象之间是紧耦合的。有了中介者之后，对象之间彻底解耦。
     *
     * 中介者内包含了整个系统的控制逻辑。当某装置需要一个新的规则时，或
     * 者是一个新的装置被加入系统内，其所需要用到的逻辑也都被加进了中介
     * 者内。
     *
     *
     *
     *中介者的优点：
     * （1）通过将对象彼此解耦，可以增加对象的复用性。
     * （2）通过将控制逻辑集中，可以简化系统维护。
     * （3）可以让对象之间所传递的消息变得简单而且大幅减少。
     *
     * 中介者的用途和缺点：
     * （1）中介者常常被用来协调相关的 GUI 组件。
     * （2）中介者模式的缺点是，如果设计不当，中介者对象本身会变得过于复杂。
     */
    public static void main(String[] args) {
        Mediator mediator = new Mediator();
        Alarm alarm = new Alarm(mediator);
        alarm.onEvent();
    }

}
