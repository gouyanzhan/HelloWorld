package com.siwuxie095.forme.designpattern.category.chapter5th.example1st;

/**
 * @author Jiajing Li
 * @date 2019-10-22 11:32:55
 */
public class Main {

    /**
     * 独一无二的对象
     *
     * 单例模式，正是用来创建独一无二的，只能有一个实例的对象的入场券。
     *
     *
     * 在某些情况下，有一些对象其实只需要一个，比如：线程池（thread pool）、缓存（cache）、
     * 对话框、处理偏好设置和注册表的对象、日志对象、充当打印机、显卡等设备的驱动程序的对象。
     * 事实上，这类对象只能有一个实例，如果制造出多个实例，就会导致许多问题产生，例如：程序
     * 的行为异常、资源使用过量，或者是不一致的结果。
     *
     * 当然，通过程序员之间的约定或者是利用全局变量（如：静态变量），也可以做到让某些类只存
     * 在一个实例，但是，单例模式却提供了更好的做法，而且可以确保只有一个实例被创建。既然如
     * 此，何乐而不为呢。
     *
     * 单例模式也给了一个全局的访问点，和全局变量一样方便，又没有全局变量的缺点。
     *
     * 全局变量的缺点，举例来说，如果将对象赋值给一个全局变量，那么必须在程序一开始就创建好
     * 对象。万一这个对象非常耗费资源，而程序在这次的执行过程中又一直没用到它，就浪费了。而
     * 单例模式则可以在需要时才创建对象。
     *（PS：有些 JVM 的实现是在用到的时候才创建对象）
     */
    public static void main(String[] args) {
        MyClass myClass = MyClass.getInstance();
        myClass.doSomething();
    }

}
