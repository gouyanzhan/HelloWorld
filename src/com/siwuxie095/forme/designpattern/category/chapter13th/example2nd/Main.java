package com.siwuxie095.forme.designpattern.category.chapter13th.example2nd;

/**
 * @author Jiajing Li
 * @date 2019-11-10 14:51:28
 */
public class Main {

    /**
     * 组织设计模式
     *
     * 随着发掘的设计模式数目逐渐增加，有必要进行分级分类，好让它们组织起来，以简化
     * 寻找模式的过程，并让同一群组内的模式互相比较。
     *
     * 在大多数的类目中，模式通常根据某种做法被归为几类。最广为人知的分类方式，就是
     * 根据模式的目标分成三个不同类目：创建型、结构型、行为型。
     *
     * 创建型模式：涉及到将对象实例化，这类模式都提供一个方法，将客户从所需要实例化
     * 的对象中解耦。有：
     * （1）工厂方法模式（Factory Method）
     * （2）抽象工厂模式（Abstract Factory）
     * （3）单例模式（Singleton）
     * （4）生成器模式（Builder）
     * （5）原型模式（Prototype）
     *
     * 结构型模式：涉及到将类或对象组合到更大的结构中。有：
     * （1）装饰者模式（Decorator）
     * （2）适配器模式（Adapter）
     * （3）外观模式（Facade）
     * （4）组合模式（Composite）
     * （5）代理模式（Proxy）
     * （6）桥接模式（Bridge）
     * （7）享元模式（Flyweight）
     *
     * 行为型模式：涉及到类和对象如何交互以及分配职责。有：
     * （1）策略模式（Strategy）
     * （2）观察者模式（Observer）
     * （3）命令模式（Command）
     * （4）模板方法模式（Template Method）
     * （5）迭代器模式（Iterator）
     * （6）状态模式（State）
     * （7）责任链模式（Chain of Responsibility）
     * （8）解释器模式（Interpreter）
     * （9）中介者模式（Mediator）
     * （10）备忘录模式（Memento）
     * （11）访问者模式（Visitor）
     *
     *
     *
     * 疑问与解答：
     *
     * 问：
     * 只有这些分类方式吗？
     * 答：
     * 不，还有人提出其他的分类方式。有些分类方式先分成三大类，然后再分成几个小类
     * （比如，解耦模式）。一般熟悉的都是最常用的分类模式。如果建立自己的分类方式
     * 可以帮你更加了解这些模式的话，那么你也可以这么做。
     *
     * 问：
     * 将模式分成不同的类目，这么做真的能够帮助我们记忆这些模式吗？
     * 答：
     * 通过比较可让你对模式有清晰的概念，这是毋庸置疑的。但是许多人被创建型、结构
     * 型和行为型类目搞得一头雾水，常常发现某个模式似乎不只适合一个类目。请记住，
     * 怎么分类并不重要，重要的是了解这些模式和它们之间的关系。只要类目有帮助，就
     * 用它，反之就不用。
     *
     * 问：
     * 为何装饰者模式被归类到结构类目中？我认为它应该是行为类目，毕竟它增加行为！
     * 答：
     * 是的，有许多开发人员都这么说！四人组之所以这么分类，他们的想法是这样的：
     * 结构型模式用来描述类和对象如何被组合以建立新的结构或新的功能。装饰者模式
     * 允许你通过 "将某对象包装进另一个对象的方式"，来组合对象以提供新的功能。
     * 所以焦点是在于如何动态地组合对象以获取功能，而不是行为型模式的目的：对象
     * 之间的沟通与互连。请牢记，这几个模式的意图并不相同，而这通常是了解某个模
     * 式属于哪个类目时的关键。
     * PS：四人组（Gang of Four, GoF） 即 四个作者的简称，他们合作写了第一本
     * 设计模式的书籍，其中有 23 个设计模式。
     *
     * 问：
     * 为什么要对模式进行分类？
     * 答：
     * 不管在什么时候，只要有一大堆东西，很自然的就会想要为它们分类，这可以帮助
     * 我们在更抽象的层次上思考这些东西。
     * 所以通过分类，可以将一组模式视为一个群体。当需要一个创建型模式，但又不知
     * 道确切是哪一个的时候，就可以用创建型模式这个词来统称它。分类也有助于比较
     * 相同类目内的其他成员。
     * 总之，类目可以让我们思考模式群组之间的关系，以及同一组模式内模式之间的关
     * 系。
     */
    public static void main(String[] args) {

    }

}
