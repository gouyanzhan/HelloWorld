package com.siwuxie095.forme.designpattern.category.chapter13th.example6th;

/**
 * @author Jiajing Li
 * @date 2019-11-10 17:37:31
 */
public class Main {

    /**
     * 反模式
     *
     * 反模式告诉你如何采用一个不好的解决方案解决一个问题。
     *
     *
     * 如果我们只有模式，而没有反模式，那么这个宇宙就不完整了。设计模式能够让你
     * 在某个特定的情境之下，对一再出现的问题提供通用的解决方案。而反模式是让你
     * 采用一个不好的解决方案解决一个问题。
     *
     * 你可能会问：怎么会有人愿意浪费时间将不好的解决方案归档？
     * 可以这么理解：如果有人老是用某个不好的解决方案处理某个问题，而通过将它归
     * 档，可以帮助其他开发人员避免同样的错误。毕竟，避免不好的解决方案，就和发
     * 现好的解决方案一样有价值。
     *
     * 反模式告诉我们为什么不好的解决方案会有吸引力。必须面对的是，如果不好的解
     * 决方案没有任何吸引力，那么根本就不会有人想要使用它。反模式最重要的工作之
     * 一，在于警告你不要陷入某种致命的诱惑。
     *
     * 反模式告诉你为何这个解决方案从长远看会造成不好的影响。为了了解为什么这是
     * 一个反模式，你必须了解它在将来如何造成负面影响。反模式会告诉你使用这个解
     * 决方案，在将来会为你带来怎样的麻烦。
     *
     * 反模式建议你改用其他的模式以提供更好的解决方案。反模式除了告诉你什么解决
     * 方案不好之外，也会为你正确的方向，向你建议一些会引向好的解决方案的可能性，
     * 这样反模式才真正有帮助。
     *
     *
     * 小结
     *
     * （1）反模式看起来总像是一个好的解决方案，但是当它真正被采用后，就会带来麻烦。
     * （2）通过将反模式归档，能够帮助其他人在实现它们之前，分辨出不好的解决方案。
     * （3）像模式一样，有许多类型的反模式，包括了开发反模式、OO 反模式、组织反模式
     * 和领域特定反模式。
     */
    public static void main(String[] args) {

    }

}
