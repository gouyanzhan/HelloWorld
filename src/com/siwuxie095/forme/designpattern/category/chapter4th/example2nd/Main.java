package com.siwuxie095.forme.designpattern.category.chapter4th.example2nd;

/**
 * @author Jiajing Li
 * @date 2019-10-12 10:35:15
 */
public class Main {

    /**
     * 封装创建对象的代码
     *
     * 现在最好将创建对象的代码 orderPizza() 之外，但怎么做呢？
     * 这就要把创建比萨的代码移到另一个对象中，由这个对象专职创建比萨。
     *
     * 称这个新对象为 "工厂"。
     *
     * 工厂（factory）处理创建对象的细节。一旦有了 SimplePizzaFactory，
     * orderPizza() 就变成此对象的客户。当需要比萨时，就叫比萨工厂做一个。
     *
     * 那些 orderPizza() 方法需要知道希腊比萨或蛤蜊比萨的日子一去不复返了。
     * 现在 orderPizza() 方法只关心从工厂得到了一个比萨，而这个比萨实现了
     * Pizza 接口，所以它可以调用 prepare()、bake()、cut()、box() 来分
     * 别进行准备、烘烤、切片、装盒。
     * （PS：这里说的接口，是广义上的接口，其实是一个超类型，即 接口或类）
     *
     *
     * 就这种做法进行一些简单的答疑：
     *
     * 问：
     * 这么做有什么好处？似乎只是把问题搬到了另一个对象罢了，问题依然存在。
     * （"new" 与 "具体" 的问题）
     * 答：
     * SimplePizzaFactory 可以有许多的客户。虽然目前只看到 orderPizza()
     * 方法是它的客户，然而，可能还有 PizzaShopMenu（比萨店菜单）类，会
     * 使用这个工厂来取得比萨的价格和描述。可能还有一个 HomeDelivery（宅
     * 急送）类，会以与 PizzaShopMenu 类不同的方式来处理 Pizza。总而言
     * 之，SimplePizzaFactory 可以有许多的客户。
     * 所以，把创建比萨的代码包装进一个类，当以后实现改变时，只需修改这个类
     * 即可。
     * 毕竟，这么做的目的正是：把具体实例化的过程，从客户的代码中删除。
     *
     * 问：
     * 似乎还有另一种设计方式，把工厂定义成一个静态的方法。这有何差别？
     * 答：
     * 利用静态方法定义一个简单的工厂，这是很常见的技巧，常被称为静态工厂。
     * 为何使用静态方法？因为不需要使用创建对象的方法来实例化对象。但请记
     * 住，这也有缺点：不能通过继承来改变创建方法的行为。
     *
     *
     * 定义简单工厂
     *
     * 简单工厂其实不是一个设计模式，反而比较像是一种编程习惯（或一种好的
     * 编程实践）。但由于经常被使用，所以被有些开发人员误认为是 "工厂模式"。
     *
     * 对于简单工厂来说，其实就是一个普通类，只不过其职责仅仅是用于创建对
     * 象。其中创建对象的方法可以是静态的，也可以是非静态的。静态的，称之
     * 为静态（简单）工厂。非静态的，称之为非静态（简单）工厂。但一般不这
     * 么细分，统称简单工厂即可。本例中使用的就是后者。
     *
     * 另外，不通过写一个新的单独的类来创建对象，而是直接在某类中写一个
     * 静态的或非静态的方法来创建对象，也可以理解为简单工厂。对于本例而
     * 言，就是不创建 SimplePizzaFactory 类，而是直接在 PizzaStore
     * 中创建一个方法 createPizza()。但显然这种方式，局限性更大。
     *
     * 总而言之，简单工厂一共有 4 种形式，但简单工厂并不是 23 种设计模式
     * 中的一员，并不存在简单工厂模式，它只是作为一种好的编程习惯（或实践），
     * 被沿袭下来。
     *
     *
     * 关于工厂模式
     *
     * 其实 23 种设计模式中也并没有工厂模式这么一说，但从概念上来说，
     * 23 种设计模式中的工厂方法模式和抽象工厂模式，都是工厂，所以才
     * 有了工厂模式一说，其实并不存在。即 可以这么说，但真正的概念归
     * 属需要明晰。
     *
     *
     * 最后
     *
     * 当有人提到简单工厂模式和工厂模式，须明白它们并不是 23 种设计
     * 模式的一种，而只是一种口头表达方式。
     */
    public static void main(String[] args) {
        SimplePizzaFactory factory = new SimplePizzaFactory();
        PizzaStore pizzaStore = new PizzaStore(factory);
        pizzaStore.orderPizza(PizzaType.CHEESE);
        pizzaStore.orderPizza(PizzaType.CLAM);
        pizzaStore.orderPizza(PizzaType.VEGGIE);
    }

}
