package com.siwuxie095.forme.designpattern.category.chapter4th.example3rd;

/**
 * @author Jiajing Li
 * @date 2019-10-12 10:35:15
 */
public class Main {

    /**
     * 加盟比萨店
     *
     * 现在比萨店经营有成，击败了竞争者，现在大家都希望比萨店能够在自家附近有加盟店。
     * 身为加盟公司经营者，你希望确保加盟店营运的质量，所以希望这些店都使用你那些经
     * 过考验的代码。
     * 但是却因为存在区域差异，每家加盟店都可能想要提供不同风味的比萨（比如：纽约、
     * 芝加哥、加州），这受到了开店地点以及该地区比萨美食家口味的影响。
     *
     *
     * 期望
     *
     * 你希望加盟店都能利用你的代码，好让比萨的流程能一成不变。但是工厂却是不一样了。
     * 其中一家加盟店希望工厂能制造纽约风味的比萨，另一家加盟店希望工厂能制造芝加哥
     * 风味的比萨，还有一家加盟店希望工厂能制造加州风味的比萨。
     *
     * 如果按照简单工厂的做法，即 类似于 SimplePizzaFactory，写出三种不同的简单
     * 工厂，那么这三个地区的加盟店都有适合的工厂可以用。
     *
     * 于是，就有了本例中的代码，代码被复制的一分为三：
     * （1）创建一个纽约比萨工厂，制造纽约风味的比萨，然后建立一个比萨店，将纽约比萨
     * 工厂的引用作为参数。当制造比萨时，就会得到纽约风味的比萨。
     * （2）创建一个芝加哥比萨工厂，同上。
     * （3）创建一个加州比萨工厂，同上。
     *
     *
     * 但是你想要多一些质量控制
     *
     * 在推广简单工厂时，你发现加盟店的确是采用你的工厂创建比萨，但是其他部分，却开
     * 始采用他们自创的流程：烘烤做法有些差异、不要切片、使用其他厂商的盒子等等。
     *
     * 显然，你是希望整个流程是能一成不变，能够全程控制的，而不是各个比萨店自行其是，
     * 任意加入自己的 "创意" 或 "改良"。
     *
     * 即 希望能建立一个框架，把加盟店和创建比萨捆绑在一起的同时又保持一定的弹性。
     *
     * 在 example1st 中，制作比萨的代码是绑定在了 PizzaStore 中，但这么做却没
     * 有弹性。那么该如何做才能鱼与熊掌二者兼得呢？
     */
    public static void main(String[] args) {

    }

}
