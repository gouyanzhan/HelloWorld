package com.siwuxie095.forme.designpattern.category.chapter6th.example2nd;

/**
 * @author Jiajing Li
 * @date 2019-10-28 14:57:05
 */
public class Main {

    /**
     * 回到餐厅，对命令模式进行简单的介绍
     *
     * 餐厅中有：顾客、女招待、厨师、以及订单，现在研究他们之间的交互。
     * （1）顾客创建订单，把订单交给女招待。
     * （2）女招待拿了订单，放在订单柜台，喊了声："订单来了！"
     * （3）厨师根据订单准备餐点。
     *
     * 具体到代码就是：
     * （1）顾客知道他要的是什么，并创建了一张订单，订单中包含了顾客订购的餐点项目，
     * 以及指定了厨师，即 createOrder()。
     * （2）女招待拿走了订单，放在订单柜台上，即 takeOrder()。
     * （3）由于订单中含有厨师信息，女招待通知厨师开始准备餐点，即 orderUp()。
     * （4）厨师根据订单来准备餐点，即 wash()、cut()、cook()。
     *
     *
     * 一张订单封装了准备餐点的请求
     *
     * 把订单想象成一个用来请求准备餐点的对象，和一般的对象一样，订单对象可以被传递：
     * 从女招待传递到订单柜台，或者从女招待传递到接替下一班的女招待。订单的接口只包
     * 含一个方法，也就是 orderUp()。这个方法封装了准备餐点所需的动作。订单内有一
     * 个到 "需要进行准备工作的对象" 的引用（即 厨师）。这一切都被封装起来，所以女
     * 招待不需要知道订单上有什么，也不需要知道是谁来准备餐点，她只需要将订单放到订
     * 单窗口，然后喊一声 "订单来了！" 就可以了。
     *
     *
     * 女招待的工作是接受订单，然后调用订单的 orderUp() 方法
     *
     * 女招待的工作很简单：接下顾客的订单，继续帮助下一个顾客，然后将一定数量的订单
     * 放到订单柜台，并调用 orderUp() 方法，让人来准备餐点。女招待其实不必担心订
     * 单的内容是什么，或者由谁来准备餐点。她只需要知道订单有一个 orderUp() 方法
     * 可以调用，这就够了。
     * 现在，一天内，不同的顾客有不同的订单，这会使得女招待的 takeOrder() 方法被
     * 传入不同的参数。女招待知道所有的订单都支持 orderUp() 方法，任何时候她需要
     * 让厨师准备餐点时，调用这个方法就是了。
     *
     *
     * 厨师具备准备餐点的知识
     *
     * 厨师是一种对象，他真正知道如何准备餐点。一旦女招待调用 orderUp() 方法，厨
     * 师就接手，实现需要创建餐点的所有方法。请注意，女招待和厨师之间是彻底的解耦：
     * 女招待的订单封装了餐点的细节，她只要调用每个订单的方法即可，而厨师看了订单就
     * 知道该做些什么餐点。厨师和女招待之间从来不需要直接沟通。
     *
     * 即
     * （1）顾客 = Client
     * （2）女招待 = Invoker
     * （3）厨师 = Receiver
     * （4）订单 = Command
     * （5）takeOrder() = setCommand()
     * （6）orderUp() = execute()
     *
     *
     * 重点
     *
     * 把餐厅想成是 OO 设计模式的一种模型，而这个模型允许将 "发出请求的对象" 和
     * "接受与执行这些请求的对象" 分隔开来。比方说，对于遥控器 API，需要分隔开
     * "发出请求的按钮代码" 和 "执行请求的厂商特定对象"。万一遥控器的每个插槽都
     * 持有一个像餐厅订单那样的对象，会怎么样？那么，当一个按钮被按下，只要调用该
     * 对象的 orderUp() 方法，灯就开了，而遥控器不知道事情是怎么发生的，也不需
     * 要知道涉及哪些对象。
     *
     * 即
     * （1）插槽（按钮） = 女招待
     * （2）一个像餐厅订单那样的对象 = 订单
     */
    public static void main(String[] args) {
        // 顾客创建订单
        Customer customer = new Customer();
        Order order = customer.createOrder();
        // 女招待拿订单到订单柜台，让厨师准备餐点
        Waitress waitress = new Waitress();
        waitress.takeOrder(order);

    }

}
